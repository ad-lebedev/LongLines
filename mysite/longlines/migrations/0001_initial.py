# -*- coding: utf-8 -*-
# Generated by Django 1.9.8 on 2016-10-18 22:57
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='LearningGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('date_started', models.DateField()),
                ('students', models.ManyToManyField(related_name='learning_group_students', related_query_name='learning_group_student', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Parameters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_published', models.DateTimeField()),
                ('circuit_diagram_type', models.PositiveSmallIntegerField(choices=[(1, 'Холостой ход'), (2, 'Короткое замыкание'), (3, 'Резистивная нагрузка'), (4, 'Емкостная нагрузка'), (5, 'Параллельное соединение резистор/конденсатор'), (6, 'Последовательное соединение резистор/конденсатор'), (7, 'Индуктивная нагрузка'), (8, 'Параллельное соединение резистор/катушка'), (9, 'Последовательное соединение резистор/катушка')])),
                ('R_gen', models.PositiveSmallIntegerField()),
                ('U_gen', models.PositiveSmallIntegerField(default=1000)),
                ('T_gen', models.PositiveSmallIntegerField(verbose_name='pulse time')),
                ('L_line', models.PositiveSmallIntegerField(verbose_name='length')),
                ('X_line', models.PositiveSmallIntegerField(verbose_name='position')),
                ('T_line', models.PositiveSmallIntegerField()),
                ('Ro_line', models.PositiveSmallIntegerField()),
                ('R_load', models.PositiveSmallIntegerField()),
                ('L_load', models.PositiveSmallIntegerField()),
                ('C_load', models.PositiveSmallIntegerField()),
                ('T_delay_osc', models.PositiveSmallIntegerField(verbose_name='delay')),
                ('T_sweep_osc', models.PositiveSmallIntegerField(verbose_name='sweep')),
                ('comment', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.CharField(max_length=50)),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(default='', max_length=1000)),
                ('number', models.PositiveSmallIntegerField(blank=True)),
            ],
            options={
                'verbose_name_plural': 'Tasks',
                'verbose_name': 'Task',
            },
        ),
        migrations.CreateModel(
            name='TaskList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.CharField(max_length=50)),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(default='', max_length=1000)),
                ('tasks', models.ManyToManyField(related_name='task_lists', related_query_name='task_list', to='longlines.Task')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TaskProgress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_status', models.PositiveSmallIntegerField(choices=[(1, 'Новая'), (2, 'Ожидает проверки'), (3, 'Выполнено'), (4, 'Отклонено')], verbose_name='status')),
                ('created_date', models.DateTimeField()),
                ('changed_date', models.DateTimeField()),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='task_progress_student', to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='longlines.Task')),
            ],
        ),
        migrations.AddField(
            model_name='parameters',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='longlines.TaskProgress'),
        ),
        migrations.AddField(
            model_name='learninggroup',
            name='task_list',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='longlines.TaskList'),
        ),
        migrations.AddField(
            model_name='learninggroup',
            name='tutor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_group_tutors', related_query_name='learning_group_tutor', to=settings.AUTH_USER_MODEL),
        ),
    ]
